namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay {

    gamestatus {

        Initializing {
          
            CreatingFirstDraft {
              
                entry/{shuffleDominoPile(); createNextDraft(); orderNextDraft();}
              
                draftReady -> /{revealNextDraft(); generateInitialPlayerOrder();} Initializing.SelectingFirstDomino;
              
            }
          
            SelectingFirstDomino {
           
              choose(Domino domino)[!isDominoTaken(domino)]/{chooseDomino(domino);} -> SelectingFirstDomino;
              
              selectionReady(Player player)[isLastPlayerInTurn(player) && hasChosen(player)] -> Playing;
              
            }
        }
      
        Playing{
          
          scoring(Game game)[isLastTurn(game) && allPlayersPlayed(game)]/{calculateAllPlayerScores(game); calculatePlayerRanking(game);} -> Scoring;
        
          CreatingNextDraft{
            
            entry/{createNextDraft(); orderNextDraft();}
            
            draftReady -> RevealingNextDraft;
            
            
          }
        
          RevealingNextDraft{
        
            entry/{revealNextDraft(); updatePlayerOrder();}
            
            manipulate(Player player, int posx, int posy, String dir)/{prePlaceDomino(player, posx, posy, dir);} -> ManipulatingDomino;
            
          }
          
          ManipulatingDomino{
            
            discard(Player player)[!isThereAvailablePlacement(player, dInK)]/{discardLatestDomino(player);} -> ConfirmingChoice;
            
            place(Player player)[verifyDomino(player)]/{placeLatestDomino(player); updatePlayerScore(player);} -> ConfirmingChoice;
            
            Idle{
              
              rotate(Player player, String direction)/{rotateLatestDomino(player, direction);} -> RotatingDomino;
              
              move(Player player, String movement)/{moveLatestDomino(player, movement);} -> MovingDomino;
              
            }  
            
            RotatingDomino{
              
            rotate(Player player, String direction)/{rotateLatestDomino(player, direction);} -> RotatingDomino;
              
               move(Player player, String movement)/{moveLatestDomino(player, movement);} -> MovingDomino;
             
            }
            
            MovingDomino{
              
              rotate(Player player, String direction)/{rotateLatestDomino(player, direction);} -> RotatingDomino;
              
               move(Player player, String movement)/{moveLatestDomino(player, movement);} -> MovingDomino;
            
            }
              
          }
          
          ConfirmingChoice{
            
            lastManipulate(Game game, Player player, int posx, int posy, String dir)[isLastTurn(game)]/{prePlaceDomino(player, posx, posy, dir);} -> ManipulatingDomino;
            
            chooseStandardDomino(Domino domino, Game game)[!isDominoTaken(domino) && !isLastTurn(game)]/{chooseDomino(domino);} -> SelectingStandardDomino;
              
          }
          
          SelectingStandardDomino{
            
            selectionReady(Player player)[isLastPlayerInTurn(player) && hasChosen(player)] -> Playing;
            
            manipulate(Player player, int posx, int posy, String dir)/{prePlaceDomino(player, posx, posy, dir);} -> ManipulatingDomino;
            
          }  
        
      }
      
     final Scoring{
       
        
        
      } 
      
    }

    /*
     * Setter for test setup
     */

    public void setGamestatus(String status){
      
        switch (status) {
          
       	case "CreatingFirstDraft":
          
       	    gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.CreatingFirstDraft;
                  
               break;
          
       	case "SelectingFirstDomino":
          
                gamestatus = Gamestatus.Initializing;
                gamestatusInitializing = GamestatusInitializing.SelectingFirstDomino;
          
               break;
          
          case "CreatingNextDraft":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.CreatingNextDraft;
          
                break;
          
          case "RevealingNextDraft":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.RevealingNextDraft;
          
                break;
          
          case "Idle":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.ManipulatingDomino;
                gamestatusPlayingManipulatingDomino = GamestatusPlayingManipulatingDomino.Idle;
          
                break;
          
          case "MovingDomino":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.ManipulatingDomino;
                gamestatusPlayingManipulatingDomino = GamestatusPlayingManipulatingDomino.MovingDomino;
          
                break;
          
          case "RotatingDomino":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.ManipulatingDomino;
                gamestatusPlayingManipulatingDomino = GamestatusPlayingManipulatingDomino.RotatingDomino;
          
                break;
          
          case "ConfirmingChoice":
          
                 gamestatus = Gamestatus.Playing;
                 gamestatusPlaying = GamestatusPlaying.ConfirmingChoice;
          
                break;
          
          case "SelectingStandardDomino":
          
                 gamestatus = Gamestatus.Playing;
                 gamestatusPlaying = GamestatusPlaying.SelectingStandardDomino;
          
                break;
          
          case "Scoring":
          
                gamestatus = Gamestatus.Scoring;
          
                break;
          
       	default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
          
       	}
    }

    /*
     * Guards
     */
    
    
  public boolean isDominoTaken(Domino domino){
    
    
    
   return true;
    
  }
  
  public boolean isLastPlayerInTurn(Player player){
    
    
    
    return true;
    
  }
      
  public boolean isLastTurn(Game game){
        
        
    return true;
    
  }
 
  public boolean hasChosen(Player player){
    
    
    
    
    return true;
    
  }
  
  public boolean isThereAvailablePlacement(Player player, DominoInKingdom dInK){
    
    
    return true;
    
  }
  
  public boolean verifyDomino(Player player){
    
    
    return true;
    
  }
      
  public boolean allPlayersPlayed(Game game){
        
        
    return true;
            
  }
    
    // You may need to add more guards here
        
    /*
     * Actions
     */
    
    public void shuffleDominoPile() {
        // TODO: implement this
    }
    
    public void generateInitialPlayerOrder() {
        // TODO: implement this
    }
    
    public void createNextDraft() {
        // TODO: implement this
    }
    
    public void orderNextDraft() {
        // TODO: implement this
    }
    
    public void revealNextDraft() {
        // TODO: implement this
    }
  
  public void chooseDomino(Domino domino){
   
    
  }
  
  public void prePlaceDomino(Player player, int posx, int posy, String dir){
    
    
  }
  
  public void placeLatestDomino(Player player){
    
    
    
  
  }
  
  public void discardLatestDomino(Player player){
    
    
    
  }
  
  public void updatePlayerScore(Player player){
    
    
    
  }
      
  public void calculateAllPlayerScores(Game game){
        
        
        
  }
      
  public void calculatePlayerRanking(Game game){
        
        
        
        
  }
      
   public void rotateLatestDomino(Player player, String direction){
        
        
        
  }
      
  public void moveLatestDomino(Player player, String movement){
        
        
        
   }
   
   public void updatePlayerOrder(){
   
   
   }
      
 }
  
}