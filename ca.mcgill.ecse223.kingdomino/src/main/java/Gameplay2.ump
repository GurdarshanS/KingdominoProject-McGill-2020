namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay2 {

    gamestatus {

        Initializing {
          
            CreatingFirstDraft {
            	entry/{shuffleDominoPile(); createNextDraft(); orderNextDraft();}
                draftReady/{revealNextDraft(); generateInitialPlayerOrder();} -> Initializing.SelectingFirstDomino;
            }
          
            SelectingFirstDomino {
           		choose(Domino domino)[!isDominoPileEmpty() && !isDominoTaken(domino) && !hasAllPlayersChosen()]/{chooseDomino(domino);} -> Initializing.SelectingFirstDomino;
              	selectionReady()[hasAllPlayersChosen()] -> Playing;
            }
        }
      
        Playing{
          
          CreatingNextDraft{
          		entry/{createNextDraft();orderNextDraft();}
            	draftReady->Playing.RevealingNextDraft;  
          }
        
          RevealingNextDraft{
        		entry/{revealNextDraft();updatePlayerOrder();}
            	manipulateFirst(Player player, int posx, int posy, String dir)/{preplaceLatestDomino(player,posx,posy,dir);} ->Playing.ManipulatingDomino;
          }
          
          ManipulatingDomino{
          
            discard(Player player)[!isThereAvailablePlacement(player)]/{discardLatestDomino(player);} -> Playing.ConfirmingChoice;
            place(Player player)[verifyDomino(player)]/{placeLatestDomino(player);updatePlayerScore(player);}-> Playing.ConfirmingChoice;
            
            IdlingDomino{
            	rotate(Player player, String dir)/{rotateLatestDomino(player,dir);}->Playing.ManipulatingDomino.RotatingDomino;
            	move(Player player, String movement)/{moveLatestDomino(player,movement);}->Playing.ManipulatingDomino.MovingDomino;               
            }  
            
            RotatingDomino{
           		rotate(Player player, String dir)/{rotateLatestDomino(player,dir);}->Playing.ManipulatingDomino.RotatingDomino;
           		move(Player player, String movement)/{moveLatestDomino(player,movement);}->Playing.ManipulatingDomino.MovingDomino;
            }
            
            MovingDomino{
              	rotate(Player player, String dir)/{rotateLatestDomino(player,dir);}->Playing.ManipulatingDomino.RotatingDomino;
           		move(Player player, String movement)/{moveLatestDomino(player,movement);}->Playing.ManipulatingDomino.MovingDomino;
            }
              
          }
          
          ConfirmingChoice{
          	choose(Domino domino)[!isDominoPileEmpty() && !isDominoTaken(domino) && !hasAllPlayersChosen()]/{chooseDomino(domino);} -> SelectingStandardDomino;
          }
          
          SelectingStandardDomino{
            manipulateNext(Player player, int posx, int posy, String dir)[!hasAllPlayersChosen()]/{preplaceLatestDomino(player,posx,posy,dir);} ->Playing.ManipulatingDomino;
			nextSelectionReady[hasAllPlayersChosen()&&!isDominoPileEmpty()]->Playing;
			lastSelectionReady(Player player, int posx, int posy, String dir)[hasAllPlayersChosen()&&isDominoPileEmpty()]/{updatePlayerOrder();preplaceLatestDomino(player,posx,posy,dir);}->Finishing;
          }  
        
      }
      
     
     Finishing{
     
     	ManipulatingLastDomino{
     		discard(Player player)[!isThereAvailablePlacement(player)]/{discardLatestDomino(player);} -> Finishing.ConfirmingLastChoice;
            place(Player player)[verifyDomino(player)]/{placeLatestDomino(player);updatePlayerScore(player);}-> Finishing.ConfirmingLastChoice;
            
     		IdlingLastDomino{
     			rotate(Player player, String dir)/{rotateLatestDomino(player,dir);}->Finishing.ManipulatingLastDomino.RotatingLastDomino;
            	move(Player player, String movement)/{moveLatestDomino(player,movement);}->Finishing.ManipulatingLastDomino.MovingLastDomino; 
     		}
     		
     		RotatingLastDomino{
     			rotate(Player player, String dir)/{rotateLatestDomino(player,dir);}->Finishing.ManipulatingLastDomino.RotatingLastDomino;
            	move(Player player, String movement)/{moveLatestDomino(player,movement);}->Finishing.ManipulatingLastDomino.MovingLastDomino; 
     		}
     		
     		MovingLastDomino{
     			rotate(Player player, String dir)/{rotateLatestDomino(player,dir);}->Finishing.ManipulatingLastDomino.RotatingLastDomino;
            	move(Player player, String movement)/{moveLatestDomino(player,movement);}->Finishing.ManipulatingLastDomino.MovingLastDomino; 
     		}
     	}
     	
     	ConfirmingLastChoice{
     		manipulateLast(Player player, int posx, int posy, String dir)[!hasAllPlayersPlayed()]/{setNextPlayer();preplaceLatestDomino(player,posx,posy,dir);}->Finishing.ManipulatingLastDomino;
     		scoring[hasAllPlayersPlayed()]/{calculateAllPlayerScores();calculatePlayerRanking();}->EndingGame;
     	}
     
     }
      
    final EndingGame{
       
        
        
     }
       
      
    }

    /*
     * Setter for test setup
     */

    public void setGamestatus(String status){
      
        switch (status) {
          
       	case "CreatingFirstDraft":
          
       	    gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.CreatingFirstDraft;
                  
               break;
          
       	case "SelectingFirstDomino":
          
                gamestatus = Gamestatus.Initializing;
                gamestatusInitializing = GamestatusInitializing.SelectingFirstDomino;
          
               break;
          
          case "CreatingNextDraft":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.CreatingNextDraft;
          
                break;
          
          case "RevealingNextDraft":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.RevealingNextDraft;
          
                break;
          
          case "IdlingDomino":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.ManipulatingDomino;
                gamestatusPlayingManipulatingDomino = GamestatusPlayingManipulatingDomino.IdlingDomino;
          
                break;
          
          case "MovingDomino":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.ManipulatingDomino;
                gamestatusPlayingManipulatingDomino = GamestatusPlayingManipulatingDomino.MovingDomino;
          
                break;
          
          case "RotatingDomino":
          
                gamestatus = Gamestatus.Playing;
                gamestatusPlaying = GamestatusPlaying.ManipulatingDomino;
                gamestatusPlayingManipulatingDomino = GamestatusPlayingManipulatingDomino.RotatingDomino;
          
                break;
          
          case "ConfirmingChoice":
          
                 gamestatus = Gamestatus.Playing;
                 gamestatusPlaying = GamestatusPlaying.ConfirmingChoice;
          
                break;
          
          case "SelectingStandardDomino":
          
                 gamestatus = Gamestatus.Playing;
                 gamestatusPlaying = GamestatusPlaying.SelectingStandardDomino;
          
                break;
                
          case "IdlingLastDomino":
          		gamestatus=Gamestatus.Finishing;
          		gamestatusFinishing=GamestatusFinishing.ManipulatingLastDomino;
          		gamestatusFinishingManipulatingLastDomino=GamestatusFinishingManipulatingLastDomino.IdlingLastDomino;
          		break;
          
          case "MovingLastDomino":
          		gamestatus=Gamestatus.Finishing;
          		gamestatusFinishing=GamestatusFinishing.ManipulatingLastDomino;
          		gamestatusFinishingManipulatingLastDomino=GamestatusFinishingManipulatingLastDomino.MovingLastDomino;
          		break;
          		
          case "RotatingLastDomino":
          		gamestatus=Gamestatus.Finishing;
          		gamestatusFinishing=GamestatusFinishing.ManipulatingLastDomino;
          		gamestatusFinishingManipulatingLastDomino=GamestatusFinishingManipulatingLastDomino.RotatingLastDomino;
          		break;
          		
          case "ConfirmingLastChoice":
          		gamestatus=Gamestatus.Finishing;
          		gamestatusFinishing=GamestatusFinishing.ConfirmingLastChoice;
          		break;
          		
          case "EndingGame":
          
                gamestatus = Gamestatus.EndingGame;
          
                break;
          
       	default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
          
       	}
    }

    /*
     * Guards
     */
    
    
  public boolean isCurrentPlayerTheLastInTurn(Player player){return true;}
  public boolean isCurrentTurnTheLastInGame(){return true;}
  public boolean isDominoTaken(Domino domino){return true;}
  public boolean hasAllPlayersChosen(){return true;}
  public boolean isThereAvailablePlacement(Player player){return true;}
  public boolean verifyDomino(Player player){return true;}
  public boolean isDominoPileEmpty(){return true;}
  public boolean hasAllPlayersPlayed(){return true;}
    // You may need to add more guards here
        
    /*
     * Actions
     */
  public void shuffleDominoPile(){}
  public void createNextDraft(){}
  public void orderNextDraft(){}
  public void revealNextDraft(){}
  public void generateInitialPlayerOrder(){}
  public void chooseDomino(Domino domino){}
  public void updatePlayerOrder(){}
  public void updatePlayerScore(Player player){}
  public void preplaceLatestDomino(Player player, int posx, int posy, String dir){}
  public void rotateLatestDomino(Player player, String dir){}
  public void moveLatestDomino(Player player, String movement){}
  public void placeLatestDomino(Player player){}
  public void discardLatestDomino(Player player){}
  public void setNextPlayer(){}
  public void calculateAllPlayerScores(){}
  public void calculatePlayerRanking(){}
  
  
}