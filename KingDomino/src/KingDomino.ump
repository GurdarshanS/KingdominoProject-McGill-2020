namespace ca.mcgill.ecse223.kingdomino.model;


enum GameState{PreGame,InGame,PostGame}
enum PlayState{StartGame,PauseGame,EndGame}
enum PlayerNum{Two,Three,Four}
enum GameMode{RegularPlay,DynastyPlay}
enum LandscapeType{Wheatfield,Lake,Forest,Grass,Mountain,Swamp}
enum NumberOfCrowns{Zero,One,Two,Three}
enum DraftState{Shown,Hidden}
enum PlayStatus{ToBePlayed,Played,Discarded}
enum draftStatus{Drafted,Undrafted}
enum TurnOrder{First,Second,Third,Fourth}

class KingDomino{
	0..1<@>- * Profile profiles;
	0..1<@>- * Game games; 
}

class Game{
	PlayerNum numPlayers;
	GameMode gameMode;
	PlayState playState;
	GameState gameState;
	
	0..1<@>- * Draft drafts;
	0..1<@>- 0..48 Domino dominos;
	0..1<@>- 0..4 Player allPlayers;
	0..1 -> 0..1 Player currentPlayer;
}

class Player{
	Boolean loadProfile;
	TurnOrder turnOrder;
	Integer currentScore;
	const Integer CASTLEX=0;
	const Integer CASTLEY=0;
	String castleColor;
	
	0..1 -> 0..1 Domino currentDomino;
	0..1<@>- 1 Kingdom kingdom;
}

association{
	0..1 Player owner -- 0..* Domino ownedDominos;
}

class Coord{
	Integer x;
	Integer y;
}

class Tile{
	LandscapeType landscape;
	NumberOfCrowns numCrowns;
	0..1<@>- 1 Coord coord; 
	0..1 -> 0..3 Tile closestNeighbors;
}

class Domino{
	unique Integer rank;
	before constructor, setRank {
    	if (aRank >= 48 || aRank<=1) {
	  		throw new RuntimeException("domino rank must be between 1 and 48, inclusively");
			}
		}
	DraftStatus draftStatus;
	PlayStatus playStatus;
	//0..1 -> 2 Tile tiles;
	0..1<@>- 2 Tile tiles;
}

class Draft{
	DraftState state;
}

association{
	0..1 Draft draft -- 0..4 Domino draftDominos;
}

class Territory{
	Integer numConnected;
	Integer numCrowns;
	Integer territoryScore={numConnected*numCrowns};
	Boolean isValid;
}

association{
	0..1 Territory territory -- * Domino territoryDominos;
}

class Kingdom{
	Integer kingdomScore;
	const Integer SIZELIM = 5;
	Integer xSize;
	Integer ySize;
	Boolean isValid;
	
	0..1-> * Tile kingdomTiles;
	0..1<@>- * Territory territories;
}

class Profile{
	String name;
	before constructor, setName {
    	if (aName == null || aName.length() == 0) {
	  		throw new RuntimeException("profile name cannot be empty");
			}
		}
	Integer numGamesPlayed;
	Integer numGamesWon;
	Integer numGamesLost;
	Integer numGamesTied={numGamesPlayed-numGamesWon-numGamesLost};
}

association{
	0..1 Profile loadedProfile -- * Player profilePlayer;
}
